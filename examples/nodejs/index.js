import * as http from "http";
import { ed25519 } from "@noble/curves/ed25519";

const date = new Date(Date.now()).toGMTString();

// Use the private key generated by farma, without the 0x prefix
const privateKey =
  "c3b706e7f9b5ccd59ea7d1d0480ce87a7169741f773fa9a5414176682a89396f30a63474db060dc079353490e6417d1318dbb06f3c1c208bbce499b710033aee";
// the Go library expects private keys in a format that is private+public.
// noble-curves expects the private key to be 32 bytes long, so we keep the
// first 32 bytes (the private part).
const keyBytes = Buffer.from(privateKey, "hex").slice(0, 32);

const pubKey = await ed.getPublicKeyAsync(keyBytes);
const pubKeyHex = Buffer.from(pubKey).toString("hex");

const options = {
  hostname: "127.0.0.1",
  port: 8080,
  path: "/api/v1/logs/20396",
  method: "GET",
  headers: {
    "Content-Type": "application/json",
    Date: date,
  },
};

const message = Buffer.from(options.method + "\n" + options.path + "\n" + date);
const signature = ed25519.sign(message, keyBytes);

const signatureHex = Buffer.from(signature).toString("hex");
options.headers["X-Signature"] = signatureHex;
options.headers["X-Public-Key"] = pubKeyHex;

const req = http.request(options, (res) => {
  let data = "";
  res.on("data", (chunk) => {
    data += chunk;
  });

  res.on("end", () => {
    console.log(data);
  });
});

req.on("error", (err) => {
  console.error("Error:", err);
});

req.end();
