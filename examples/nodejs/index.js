import * as http from "http";
import { ed25519 } from "@noble/curves/ed25519";
import { Base64 } from "js-base64";

const date = new Date(Date.now()).toGMTString();

// Frame id is the first part of the X-Public-Key header
const frame_id = "z0001";
// Use the private key generated by farma
const privateKey =
  "bSyiLSZtM7/WPUOfgmboyaQsgVhJthYDm2PQFOrhm2UMC8KVJAx2udltMK3M020HMdZO69OUcJIBpaX1ylR/fg==";

// the Go library expects private keys in a format that is private+public.
// Node noble-curves expects the private key to be 32 bytes long, so we keep the
// first 32 bytes (the private part).
const keyBytes = Base64.toUint8Array(privateKey).slice(0, 32);

const pubKey = ed25519.getPublicKey(keyBytes);
const pubKey64 = Base64.fromUint8Array(pubKey);

const options = {
  hostname: "127.0.0.1",
  port: 8080,
  path: "/api/v2/logs/z0001/",
  method: "GET",
  headers: {
    "Content-Type": "application/json",
  },
};

const message = Buffer.from(options.method + "\n" + options.path + "\n" + date);
const signature = ed25519.sign(message, keyBytes);

const signature64 = Base64.fromUint8Array(signature);
options.headers["X-Signature"] = signature64;
options.headers["X-Public-Key"] = frame_id + ":" + pubKey64;
options.headers["X-Date"] = date;

const req = http.request(options, (res) => {
  let data = "";
  res.on("data", (chunk) => {
    data += chunk;
  });

  res.on("end", () => {
    console.log(data);
  });
});

req.on("error", (err) => {
  console.error("Error:", err);
});

req.end();
